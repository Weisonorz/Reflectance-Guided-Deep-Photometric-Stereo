PS_FCN_FiLM(
  (brdf_embed_block): BRDF_EmbedBlock(
    (embed_transform): Sequential(
      (0): Linear(in_features=14, out_features=512, bias=True)
      (1): LeakyReLU(negative_slope=0.1)
    )
  )
  (extractor): FeatExtractor(
    (conv1): FiLMConv(
      (conv): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu): LeakyReLU(negative_slope=0.1, inplace=True)
      (FiLMGnerator): Linear(in_features=512, out_features=128, bias=True)
      (FiLMBlock): FiLMBlock()
    )
    (conv2): FiLMConv(
      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (relu): LeakyReLU(negative_slope=0.1, inplace=True)
      (FiLMGnerator): Linear(in_features=512, out_features=256, bias=True)
      (FiLMBlock): FiLMBlock()
    )
    (conv3): FiLMConv(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu): LeakyReLU(negative_slope=0.1, inplace=True)
      (FiLMGnerator): Linear(in_features=512, out_features=256, bias=True)
      (FiLMBlock): FiLMBlock()
    )
    (conv4): FiLMConv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (relu): LeakyReLU(negative_slope=0.1, inplace=True)
      (FiLMGnerator): Linear(in_features=512, out_features=512, bias=True)
      (FiLMBlock): FiLMBlock()
    )
    (conv5): FiLMConv(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (relu): LeakyReLU(negative_slope=0.1, inplace=True)
      (FiLMGnerator): Linear(in_features=512, out_features=512, bias=True)
      (FiLMBlock): FiLMBlock()
    )
    (conv6): Sequential(
      (0): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (1): LeakyReLU(negative_slope=0.1, inplace=True)
    )
    (conv7): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.1, inplace=True)
    )
  )
  (regressor): Regressor(
    (deconv1): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.1, inplace=True)
    )
    (deconv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.1, inplace=True)
    )
    (deconv3): Sequential(
      (0): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (1): LeakyReLU(negative_slope=0.1, inplace=True)
    )
    (est_normal): Sequential(
      (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)